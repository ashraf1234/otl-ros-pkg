// -*- C++ -*- generated by wxGlade 0.6.3 on Sat Sep 18 14:34:05 2010

#include "hsv_panel.h"
#include <ros/ros.h>

// begin wxGlade: ::extracode
// end wxGlade



HSVBaseFrame::HSVBaseFrame(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxFrame(parent, id, title, pos, size, wxDEFAULT_FRAME_STYLE)
{
    // begin wxGlade: HSVBaseFrame::HSVBaseFrame
    panel_1 = new wxPanel(this, wxID_ANY);
    label_1 = new wxStaticText(panel_1, wxID_ANY, wxT("hue max\n"));
    slider_1 = new wxSlider(panel_1, wxID_ANY, 0, 0, 255, wxDefaultPosition, wxDefaultSize, wxSL_HORIZONTAL|wxSL_LABELS);
    label_2 = new wxStaticText(panel_1, wxID_ANY, wxT("hue min\n"));
    slider_2 = new wxSlider(panel_1, wxID_ANY, 0, 0, 255, wxDefaultPosition, wxDefaultSize, wxSL_HORIZONTAL|wxSL_LABELS);
    label_3 = new wxStaticText(panel_1, wxID_ANY, wxT("satulation max\n"));
    slider_3 = new wxSlider(panel_1, wxID_ANY, 0, 0, 255, wxDefaultPosition, wxDefaultSize, wxSL_HORIZONTAL|wxSL_LABELS);
    label_6 = new wxStaticText(panel_1, wxID_ANY, wxT("satulation min\n"));
    slider_4 = new wxSlider(panel_1, wxID_ANY, 0, 0, 255, wxDefaultPosition, wxDefaultSize, wxSL_HORIZONTAL|wxSL_LABELS);
    label_4 = new wxStaticText(panel_1, wxID_ANY, wxT("value max\n"));
    slider_5 = new wxSlider(panel_1, wxID_ANY, 0, 0, 255, wxDefaultPosition, wxDefaultSize, wxSL_HORIZONTAL|wxSL_LABELS);
    label_5 = new wxStaticText(panel_1, wxID_ANY, wxT("value min\n"));
    slider_6 = new wxSlider(panel_1, wxID_ANY, 0, 0, 255, wxDefaultPosition, wxDefaultSize, wxSL_HORIZONTAL|wxSL_LABELS);
    label_7 = new wxStaticText(panel_1, wxID_ANY, wxT("area max\n"));
    slider_7 = new wxSlider(panel_1, wxID_ANY, 0, 0, 10000, wxDefaultPosition, wxDefaultSize, wxSL_HORIZONTAL|wxSL_LABELS);
    label_8 = new wxStaticText(panel_1, wxID_ANY, wxT("area min\n"));
    slider_8 = new wxSlider(panel_1, wxID_ANY, 0, 0, 1000, wxDefaultPosition, wxDefaultSize, wxSL_HORIZONTAL|wxSL_LABELS);

    set_properties();
    do_layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(HSVBaseFrame, wxFrame)
    // begin wxGlade: HSVBaseFrame::event_table
    EVT_COMMAND_SCROLL(wxID_ANY, HSVBaseFrame::ScrollUpdate)
    EVT_COMMAND_SCROLL(wxID_ANY, HSVBaseFrame::ScrollUpdate)
    EVT_COMMAND_SCROLL(wxID_ANY, HSVBaseFrame::ScrollUpdate)
    EVT_COMMAND_SCROLL(wxID_ANY, HSVBaseFrame::ScrollUpdate)
    EVT_COMMAND_SCROLL(wxID_ANY, HSVBaseFrame::ScrollUpdate)
    EVT_COMMAND_SCROLL(wxID_ANY, HSVBaseFrame::ScrollUpdate)
    EVT_COMMAND_SCROLL(wxID_ANY, HSVBaseFrame::ScrollUpdate)
    EVT_COMMAND_SCROLL(wxID_ANY, HSVBaseFrame::ScrollUpdate)
    // end wxGlade
END_EVENT_TABLE();


void HSVBaseFrame::ScrollUpdate(wxScrollEvent &event)
{
    static ros::NodeHandle node;
    
    node.setParam("/img_filter_lv1/1/hue/max", slider_1->GetValue());
    node.setParam("/img_filter_lv1/1/hue/min", slider_2->GetValue());
    node.setParam("/img_filter_lv1/1/saturation/max", slider_3->GetValue());
    node.setParam("/img_filter_lv1/1/saturation/min", slider_4->GetValue());
    node.setParam("/img_filter_lv1/1/value/max", slider_5->GetValue());
    node.setParam("/img_filter_lv1/1/value/min", slider_6->GetValue());
    node.setParam("/img_filter_lv1/1/area_size/max", slider_7->GetValue());
    node.setParam("/img_filter_lv1/1/area_size/min", slider_8->GetValue());

    
//    event.Skip();
//    wxLogDebug(wxT("Event handler (HSVBaseFrame::ScrollUpdate) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


// wxGlade: add HSVBaseFrame event handlers


void HSVBaseFrame::set_properties()
{
    // begin wxGlade: HSVBaseFrame::set_properties
    SetTitle(wxT("frame_1"));
    // end wxGlade
}


void HSVBaseFrame::do_layout()
{
    // begin wxGlade: HSVBaseFrame::do_layout
    wxBoxSizer* sizer_1 = new wxBoxSizer(wxVERTICAL);
    wxGridSizer* grid_sizer_1 = new wxGridSizer(8, 2, 0, 0);
    grid_sizer_1->Add(label_1, 0, 0, 0);
    grid_sizer_1->Add(slider_1, 0, wxEXPAND, 0);
    grid_sizer_1->Add(label_2, 0, 0, 0);
    grid_sizer_1->Add(slider_2, 0, wxEXPAND, 0);
    grid_sizer_1->Add(label_3, 0, 0, 0);
    grid_sizer_1->Add(slider_3, 0, wxEXPAND, 0);
    grid_sizer_1->Add(label_6, 0, 0, 0);
    grid_sizer_1->Add(slider_4, 0, wxEXPAND, 0);
    grid_sizer_1->Add(label_4, 0, 0, 0);
    grid_sizer_1->Add(slider_5, 0, wxEXPAND, 0);
    grid_sizer_1->Add(label_5, 0, 0, 0);
    grid_sizer_1->Add(slider_6, 0, wxEXPAND, 0);
    grid_sizer_1->Add(label_7, 0, 0, 0);
    grid_sizer_1->Add(slider_7, 0, wxEXPAND, 0);
    grid_sizer_1->Add(label_8, 0, 0, 0);
    grid_sizer_1->Add(slider_8, 0, wxEXPAND, 0);
    panel_1->SetSizer(grid_sizer_1);
    sizer_1->Add(panel_1, 1, wxEXPAND, 0);
    SetSizer(sizer_1);
    sizer_1->Fit(this);
    Layout();
    // end wxGlade

    ros::NodeHandle node;
    int value;
    if (node.getParam("/img_filter_lv1/1/hue/max", value))
    {
        slider_1->SetValue(value);
    }
    if (node.getParam("/img_filter_lv1/1/hue/min", value))
    {
        slider_2->SetValue(value);
    }
    if (node.getParam("/img_filter_lv1/1/saturation/max", value))
    {
        slider_3->SetValue(value);
    }
    if (node.getParam("/img_filter_lv1/1/saturation/min", value))
    {
        slider_4->SetValue(value);
    }
    if (node.getParam("/img_filter_lv1/1/value/max", value))
    {
        slider_5->SetValue(value);
    }
    if (node.getParam("/img_filter_lv1/1/value/min", value))
    {
        slider_6->SetValue(value);
    }
    if (node.getParam("/img_filter_lv1/1/area_size/max", value))
    {
        slider_7->SetValue(value);
    }
    if (node.getParam("/img_filter_lv1/1/area_size/min", value))
    {
        slider_8->SetValue(value);
    }
}



class HSVApp: public wxApp {
public:
    bool OnInit();
};

IMPLEMENT_APP(HSVApp)

bool HSVApp::OnInit()
{
    int argc = 1;
    char *argv[] = {"hsv_panel"};
    ros::init(argc, argv, "hsv_panel");
    wxInitAllImageHandlers();
    HSVBaseFrame* frame_1 = new HSVBaseFrame(NULL, wxID_ANY, wxEmptyString);
    SetTopWindow(frame_1);
    frame_1->Show();
    return true;
}


